---
description: OAS Zod Validator project rules
globs: *
---
Rule for OAS Zod Validator development standards and best practices.

<rule>
name: oas_zod_validator_standards
description: Standards and best practices for developing the OAS Zod Validator library
filters:
  - type: file_change
    pattern: "src/**/*"
  - type: file_change
    pattern: "test/**/*"

actions:

- type: validate
  rules:

  - category: "Core Principles"
    checks:

    - "Strict adherence to OpenAPI Specification"
    - "Minimal dependencies and optimal performance"
    - "Developer-friendly error messages"
    - "Modular and extensible architecture"
    - "Consistent coding patterns"

  - category: "Schema Handling"
    checks:

    - "OpenAPI to Zod type mapping accuracy"
    - "Edge case handling (nullable, oneOf, allOf)"
    - "Recursive schema support"
    - "Type safety preservation"
    - "Default value handling"
    - "Standardized error messaging"

  - category: "API & Module Structure"
    checks:

    - "ESM import/export usage"
    - "Explicit file extensions"
    - "Pure function implementation"
    - "Proper modularization"
    - "Computation caching"

  - category: "CLI & API Requirements"
    checks:

    - "YAML and JSON support"
    - "Appropriate warning system"
    - "Correct exit codes"
    - "Structured API responses"

  - category: "Testing & QA"
    checks:

    - "100% core logic coverage"
    - "Snapshot testing implementation"
    - "Performance benchmark inclusion"
    - "Linting compliance"

  - category: "Contribution Standards"
    checks:

    - "Git flow adherence"
    - "Conventional commits usage"
    - "Backward compatibility"
    - "Self-documenting code"

  - category: "Documentation & Versioning"
    checks:
    - "Documentation currency"
    - "SemVer compliance"
    - "Example inclusion"

- type: suggest
  message: |
  Ensure your changes comply with OAS Zod Validator standards:

  1. Code Quality:

     - Write pure functions
     - Use explicit typing
     - Implement proper error handling
     - Follow ESM module system

  2. Testing Requirements:

     - Include unit tests
     - Add performance benchmarks
     - Update snapshots if needed

  3. Documentation:

     - Update relevant docs
     - Include JSDoc comments
     - Add usage examples

  4. Performance:
     - Implement caching where appropriate
     - Avoid unnecessary computations
     - Consider memory usage

examples:

- input: |
  // Good Example
  export const parseSchema = (schema: OpenAPISchema): z.ZodType => {
  if (SCHEMA_CACHE.has(schema)) {
  return SCHEMA_CACHE.get(schema);
  }
  const zodSchema = convertToZod(schema);
  SCHEMA_CACHE.set(schema, zodSchema);
  return zodSchema;
  }

- input: |
  // Bad Example
  function parseSchema(schema) {
  return convertToZod(schema); // No caching, no types
  }

metadata:
priority: high
version: 1.0
</rule>
